<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Usuario', 'bd');

/**
 * BaseUsuario
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $cod_usuario
 * @property string $nome
 * @property string $login
 * @property string $senha
 * @property integer $cod_funcao
 * @property date $data_aniversario
 * @property enum $ativo
 * @property Funcao $Funcao
 * 
 * @method integer getCodUsuario()       Returns the current record's "cod_usuario" value
 * @method string  getNome()             Returns the current record's "nome" value
 * @method string  getLogin()            Returns the current record's "login" value
 * @method string  getSenha()            Returns the current record's "senha" value
 * @method integer getCodFuncao()        Returns the current record's "cod_funcao" value
 * @method date    getDataAniversario()  Returns the current record's "data_aniversario" value
 * @method enum    getAtivo()            Returns the current record's "ativo" value
 * @method Funcao  getFuncao()           Returns the current record's "Funcao" value
 * @method Usuario setCodUsuario()       Sets the current record's "cod_usuario" value
 * @method Usuario setNome()             Sets the current record's "nome" value
 * @method Usuario setLogin()            Sets the current record's "login" value
 * @method Usuario setSenha()            Sets the current record's "senha" value
 * @method Usuario setCodFuncao()        Sets the current record's "cod_funcao" value
 * @method Usuario setDataAniversario()  Sets the current record's "data_aniversario" value
 * @method Usuario setAtivo()            Sets the current record's "ativo" value
 * @method Usuario setFuncao()           Sets the current record's "Funcao" value
 * 
 * @package    tcc
 * @subpackage model
 * @author     Renato e Leo
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsuario extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('usuario');
        $this->hasColumn('cod_usuario', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('nome', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('login', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('senha', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('cod_funcao', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('data_aniversario', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('ativo', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'S',
              1 => 'N',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Funcao', array(
             'local' => 'cod_funcao',
             'foreign' => 'cod_funcao'));
    }
}